name: Build and Push Docker Image 2

on:
  push:
    branches:
      - master
    paths:
      - 'version.txt'
      - 'enforce.txt'
  workflow_dispatch:
    inputs:
      PLATFORM_1:
        description: "PLATFORM_1"
        required: false
        default: "linux.x86_64"
      PLATFORM_2:
        description: "PLATFORM_2"
        required: false
        default: "linux.aarch64"
      PLATFORM_3:
        description: "PLATFORM_3"
        required: false
        default: "linux.armv7"

permissions:
  contents: write
  packages: write

env:
  DOCKER_REPO: jierka/tokilane
  PLATFORM_1: linux.x86_64
  PLATFORM_2: linux.aarch64
  PLATFORM_3: linux.armv7
  
jobs:

    platforms:
      runs-on: ubuntu-latest
      outputs:
        platform_1: ${{ inputs.PLATFORM_1 || env.PLATFORM_1 }}
        platform_2: ${{ inputs.PLATFORM_2 || env.PLATFORM_2 }}
        platform_3: ${{ inputs.PLATFORM_3 || env.PLATFORM_3 }}
      steps:
        - name: Prepare platforms
          run: |
            echo "PLATFORM_1=${{ env.PLATFORM_1 }}" >> $GITHUB_ENV
            echo "PLATFORM_2=${{ env.PLATFORM_2 }}" >> $GITHUB_ENV
            echo "PLATFORM_3=${{ env.PLATFORM_3 }}" >> $GITHUB_ENV

    build:
      needs: platforms
      strategy:
        matrix:
          platform: [ "${{ needs.platforms.outputs.platform_1 }}", "${{ needs.platforms.outputs.platform_2 }}", "${{ needs.platforms.outputs.platform_3 }}" ]
          include:
            - platform: linux.x86_64
              runs-on: ubuntu-latest
            - platform: linux.aarch64
              runs-on: linuxarm64
            - platform: linux.armv7
              runs-on: linuxarm64

      runs-on: ${{ matrix.runs-on }}

      env:
        BUILD_DIR: tokilane-${{ matrix.platform }}
        DOCKER_PLATFORM: ${{ matrix.platform }}

      steps:
      - uses: actions/checkout@v4

      - name: Replace darwin with macos
        run: echo "BUILD_DIR=${{ env.BUILD_DIR }}" | sed 's/darwin/macos/' >> $GITHUB_ENV

      - name: Replace platform with Docker platform
        run: |
          echo "DOCKER_PLATFORM=${{ env.DOCKER_PLATFORM }}" | \
          sed 's/linux.x86_64/linux\/amd64/' | \
          sed 's/linux.aarch64/linux\/arm64\/v8/' | \
          sed 's/linux.armv7/linux\/arm\/v7/' >> $GITHUB_ENV

      - name: Debug Docker Platform
        run: echo "DOCKER_PLATFORM=${{ env.DOCKER_PLATFORM }}"

      - name: Get version
        id: get_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_JIERKA_USERNAME }}
          password: ${{ secrets.DOCKER_JIERKA_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPO }}:v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}
          platforms: ${{ env.DOCKER_PLATFORM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    create-release:
      needs: build
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_JIERKA_USERNAME }}
          password: ${{ secrets.DOCKER_JIERKA_PASSWORD }}

      - name: Create multi-platform image
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_REPO }}:v${{ steps.get_version.outputs.VERSION }} \
            --tag ${{ env.DOCKER_REPO }}:latest \
            ${{ env.DOCKER_REPO }}:v${{ steps.get_version.outputs.VERSION }}-${{ env.PLATFORM_1 }} \
            ${{ env.DOCKER_REPO }}:v${{ steps.get_version.outputs.VERSION }}-${{ env.PLATFORM_2 }} \
            ${{ env.DOCKER_REPO }}:v${{ steps.get_version.outputs.VERSION }}-${{ env.PLATFORM_3 }}
            
      - name: Get Docker Hub token
        run: |
          response=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKER_JIERKA_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_JIERKA_PASSWORD }}\"}" https://hub.docker.com/v2/users/login/)
          token=$(echo $response | jq -r .token)
          echo "DOCKER_HUB_TOKEN=$token" >> $GITHUB_ENV

      - name: Delete old amd64 tag
        run: |
          curl -s -X DELETE -H "Authorization: JWT ${{ env.DOCKER_HUB_TOKEN }}" "https://hub.docker.com/v2/namespaces/${{ secrets.DOCKER_JIERKA_USERNAME }}/repositories/${{ env.DOCKER_REPO }}/tags/v${{ steps.get_version.outputs.VERSION }}-${{ env.PLATFORM_1 }}"

      - name: Delete old arm64 tag
        run: |
          curl -s -X DELETE -H "Authorization: JWT ${{ env.DOCKER_HUB_TOKEN }}" "https://hub.docker.com/v2/namespaces/${{ secrets.DOCKER_JIERKA_USERNAME }}/repositories/${{ env.DOCKER_REPO }}/tags/v${{ steps.get_version.outputs.VERSION }}-${{ env.PLATFORM_2 }}"

      - name: Delete old armv7 tag
        run: |
          curl -s -X DELETE -H "Authorization: JWT ${{ env.DOCKER_HUB_TOKEN }}" "https://hub.docker.com/v2/namespaces/${{ secrets.DOCKER_JIERKA_USERNAME }}/repositories/${{ env.DOCKER_REPO }}/tags/v${{ steps.get_version.outputs.VERSION }}-${{ env.PLATFORM_3 }}"
