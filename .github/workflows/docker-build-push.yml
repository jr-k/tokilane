name: Build and Push Docker Image

on:
  push:
    branches:
      - master
    paths:
      - 'version.txt'
      - 'enforce.txt'
  workflow_dispatch:
    
env:
  REGISTRY: docker.io
  IMAGE_NAME: tokilane

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify Go module structure
      run: |
        echo "Checking Go module structure..."
        ls -la
        echo "Checking internal directory..."
        ls -la internal/
        echo "Checking if internal/content exists..."
        ls -la internal/content/
        echo "Verifying go.mod..."
        cat go.mod

    - name: Get version
      id: get_version
      run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_JIERKA_USERNAME }}
        password: ${{ secrets.DOCKERHUB_JIERKA_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_JIERKA_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=pr,suffix=-v${{ steps.get_version.outputs.VERSION }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=v${{ steps.get_version.outputs.VERSION }},enable={{is_default_branch}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
