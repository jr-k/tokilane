name: Build and Release Multi-Architecture

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: tokilane

jobs:
  build:
    name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            artifact_name: tokilane-linux-amd64
            archive_type: tar.gz
          - goos: linux
            goarch: arm64
            artifact_name: tokilane-linux-arm64
            archive_type: tar.gz
          - goos: windows
            goarch: amd64
            artifact_name: tokilane-windows-amd64
            archive_type: zip
          - goos: windows
            goarch: arm64
            artifact_name: tokilane-windows-arm64
            archive_type: zip
          - goos: darwin
            goarch: amd64
            artifact_name: tokilane-darwin-amd64
            archive_type: tar.gz
          - goos: darwin
            goarch: arm64
            artifact_name: tokilane-darwin-arm64
            archive_type: tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        go mod download
        npm ci

    - name: Build frontend
      run: npm run build

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist/bin
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags="-s -w" -o dist/bin/tokilane.exe cmd/server/main.go
        else
          go build -ldflags="-s -w" -o dist/bin/tokilane cmd/server/main.go
        fi

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.archive_type }}" = "zip" ]; then
          zip -r ../${{ matrix.artifact_name }}.zip .
        else
          tar -czf ../${{ matrix.artifact_name }}.tar.gz .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.${{ matrix.archive_type }}

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_JIERKA_USERNAME }}
        password: ${{ secrets.DOCKERHUB_JIERKA_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_JIERKA_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_JIERKA_USERNAME }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts

    - name: Move artifacts to root
      run: |
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          mv "$file" ./
        done

    - name: Generate checksums
      run: |
        for file in *.tar.gz *.zip; do
          sha256sum "$file" >> checksums.txt
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.zip
          checksums.txt
        body: |
          ## üöÄ Tokilane Release ${{ github.ref_name }}
          
          ### üì¶ Downloads
          
          **Linux:**
          - `tokilane-linux-amd64.tar.gz` - Linux x86_64
          - `tokilane-linux-arm64.tar.gz` - Linux ARM64
          
          **Windows:**
          - `tokilane-windows-amd64.zip` - Windows x86_64
          - `tokilane-windows-arm64.zip` - Windows ARM64
          
          **macOS:**
          - `tokilane-darwin-amd64.tar.gz` - macOS Intel
          - `tokilane-darwin-arm64.tar.gz` - macOS Apple Silicon
          
          ### üê≥ Docker
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_JIERKA_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ### üìã Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Run the `tokilane` binary (or `tokilane.exe` on Windows)
          
          ### üîê Verification
          All binaries are signed and checksums are provided in `checksums.txt`.
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
